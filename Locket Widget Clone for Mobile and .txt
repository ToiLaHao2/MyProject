Locket Widget Clone for Mobile and Web

1. Mục đích
	- Học hỏi sâu hơn về JavaScript, các nền tảng lập trình hiện tại như ReactJs, React Native, NodeJs, MongoDb, Express, Socket.io, Docker. Làm được project thực tế và phát triển kỹ năng tư duy.  
2. Database
	- Entity:
		+ User	:	user_id, user_name, user_email, user_phone, user_dOb, user_password, created_at, created_by, updated_at, updated_by, friends[{user_id, status, created_at}](dự kiến không cần bảng phụ vì số lượng friends dự kiến từ 100 đổ lại)
		+ Photo	:	photo_id, photo_url, photo_caption, created_at, created_by
		+ Message :	message_id, message_content, created_at, craeted_by
		+ Album : 	album_id, album_name(đang phân cmn vân), created_at, created_by, updated_at, updated_by, album_users[{user_id, status}], photos[{photo_id}]
		+ Conversation: conversation_id, user1_id, user2_id, messages[{message_id}]

3.Server
	
	- Use Case : 
		+ User có thể Đăng nhập, Đăng ký, Edit thông tin bản thân; có thể up ảnh với caption mới, tạo album với friend, chat giữa 2 người
		+ Album sẽ chứa các ảnh được user chọn, khi tạo tài khoản sẽ có 1 album default để chứa ảnh chia sẽ của mọi friends trong list của user.
		+ Các user đã kết bạn với nhau sẽ xem được ảnh của nhau, user1 khi kết bạn vs user 2 nhưng không kết bạn với user 3 thì sẽ không thấy được ảnh của user 3.;
		+ gợi ý kết bạn thông qua số điện thoại.
		+ có thể tải về album
		+ có thể xem ảnh của album
	- Controllers:
		+ AuthController:	* Register
							* login
							* logout(có thể không cần)
							* edit profile (thông tin cá nhân: email, sdt, nick name)
							* get profile
							* update avatar (ảnh sẽ được tải lên 1 cloud free và dùng link để lấy ảnh, đang tìm kiếm)
		+ UserController: 	* add friend
							* accept friend	
							* reject friend
							* block friend
							* get friend list
							* get friend request
							* get friend profile
							* get friend photo

		+ PhotoController:	* upload photo
							* edit photo (chỉnh caption, )
							* delete photo	
							* get photo
							* get photo by album
		+ AlbumController:  * get album
							* delete album
		



*Project structure Express và NodeJS
	- /Controllers : Chứa các contoller để viết các API
		xxxx.controller.js => xxxx là nhiệm vụ vd: login.controller
	- /Routes : Chứa các tuyến đường đã tạo bằng cách dùng Express Router kết hợp với controller.
		xxxx.routes.js
	- /Models : Chứa các file như Schema và các chức năng cần thiết của schema
		xxxx.model.js
	- /Middleware : Chứa các phần mềm trung gian như xác thực, Authorization.
		xxxx.middleware.js
	- /Utils : Chứa các chức năng mà sẽ dùng nhiều lần trong server. vd: checkMissing Params trước khi xử lý !RẤT CẦN THIẾT/
	- /Configs : dùng cấu hình các API/ dịch vụ bên thứ 3 như passport, các thông số như keyAPI